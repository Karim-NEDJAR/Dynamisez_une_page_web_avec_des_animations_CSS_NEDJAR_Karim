/// pour les media queries
@mixin mobile {
    @media screen and (max-width: $max-mobile) {
        @content;
    }
}

@mixin tablette {
    @media screen and (min-width: $min-tablette) and (max-width: $max-tablette) {
        @content;
    }
}

@mixin ordinateur {
    @media screen and (min-width: $min-ordinateur) {
        @content;
    }
}


/// mixin de création d'un bouton basique
/// L'HTML du bouton comporte une balise p avec du texte,  encadrée par une div
/// avec border-radius, sans bordure,   background gris et texte en blanc. 
/// La mixin prend en paramètres: 
/// (1) la largeur $w   (2) la hauteur $h   (3) la base $b (1rem = $b pixels)
/// valeurs en pixels MAIS  SANS NOTER l'UNITé px (nombres purs dans les parenthèses)
/// valeurs par défaut: $w = 18rem = 216px, $h = 4rem = 48px, $b = 12. 
/// Les dimensions seront réexprimées en unités rem 
@mixin basic-btn ($w: 216, $h: 48, $b: 12) {
    width: calc($w/$b)*1rem;
    height: calc($h/$b)*1rem;
    display: flex;
    justify-content: center;
    align-items: center;
    border-bottom-right-radius: calc($h/(2*$b))*1rem;
    border-top-right-radius: calc($h/(2*$b))*1rem;
    border-bottom-left-radius: calc($h/(2*$b))*1rem;
    border-top-left-radius: calc($h/(2*$b))*1rem;
    background: #888;
    color: #fff;
}


/// création d'arrondis tous identiques, en paramètre le côté 
/// termes acceptés: "right", "left", "top", "bottom" et  "all"
/// la valeur de l'arrondi en pixels sans l'unité px (nombre pur). 

@mixin makeradius ($side: "all", $arrondi: 12) {
    @if (($side =="all") or ($side =="top") or ($side =="left")) {
        border-top-left-radius: calc($arrondi/12)*1rem;
    }

    @if (($side =="all") or ($side =="top") or ($side =="right")) {
        border-top-right-radius: calc($arrondi/12)*1rem;
    }

    @if (($side =="all") or ($side =="bottom") or ($side =="left")) {
        border-bottom-left-radius: calc($arrondi/12)*1rem;
    }

    @if (($side =="all") or ($side =="bottom") or ($side =="right")) {
        border-bottom-right-radius: calc($arrondi/12)*1rem;
    }
}



/// création de puces numérotées circulaires 
/// spécifiquement de taille 24 sur 24, font-size 14px
@mixin puce-numerotee {
    width: calc(24/12)*1rem;
    height: calc(24/12)*1rem;
    font-size: calc(14/12)*1rem;
    background-color: $bg-puce-num;
    color: #fff;
    text-align: center;
    margin: 0;
    padding-top: calc(6/12)*1rem;
    @include makeradius;
}

/// dimentionnement et initialisation d'un pseudo-élément 
/// (utile pour les transitions de translation / opacité  
/// pseudo-élément  à utiliser avec la la propriété  opacity  
/// laquelle permet de faire des transitions de couleur sans que 
/// le navigateur ne fasse des calculs de type “paint”.  )
@mixin init-pseudo-element {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}




/// arrondis pour les cercles
@mixin radius-50 {
    border-top-left-radius: 50%;
    border-bottom-left-radius: 50%;
    border-top-right-radius: 50%;
    border-bottom-right-radius: 50%;
}

/// personnalisation haut  du load spinner :   $primaire;
// personnalisation bas du load spinner:  $secondaire;
@mixin spinner-haut-et-bas ($color: $primaire) {
    border: 0.05vw solid;
    padding: 0.8vw;
    background: transparent;
    background-clip: content-box;
    width: 2vw;
    height: 2vw;
    @include  radius-50();
    margin: 0;
    opacity: 1;
    border-color: $color $color $color $color ;
    @content;

}

/// personnalisation droite du load spinner :  border : $primaire;
// personnalisation gauche du load spinner:  border: $secondaire;

@mixin spinner-droite-et-gauche ($couleur: $primaire ) {
    border: 0.45vw double $couleur;
    padding: 0.2vw;
    background-clip: content-box;
    width: 2vw;
    height: 2vw;
     @include  radius-50();
    margin: 0;
    opacity: 1;

    @if ($couleur ==$primaire) {
        box-shadow:
            inset 0.15vw 0vw 0.15vw 0.15vw $secondaire,
            inset 0vw 0.15vw 0.15vw 0.15vw $secondaire,
            inset -0.15vw 0vw 0.15vw 0.15vw $secondaire,
            inset 0vw -0.15vw 0.15vw 0.15vw $secondaire;
    }

    @else {
        box-shadow:
            inset 0.15vw 0vw 0.15vw 0.15vw $primaire,
            inset 0vw 0.15vw 0.15vw 0.15vw $primaire,
            inset -0.15vw 0vw 0.15vw 0.15vw $primaire,
            inset 0vw -0.15vw 0.15vw 0.15vw $primaire;
    }

    ;
    border-color: $couleur  ;
}




